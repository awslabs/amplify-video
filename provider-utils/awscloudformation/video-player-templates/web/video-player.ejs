<% if (framework === 'react') { -%>
import React from 'react';
import videojs from 'video.js';
import 'video.js/dist/video-js.css';
<% if (channelLatency === 'LOW') { -%>
// eslint-disable-next-line no-undef
registerIVSTech(videojs);
<% } -%>

export default class VideoPlayer extends React.Component {
  componentDidMount() {
    this.player = videojs(this.videoNode, this.props);
    this.player.ready(() => {
      console.log('ready');
<% if (channelLatency === 'LOW') { -%>
      this.player.src(this.props.src);
      const ivsPlayer = this.player.getIVSPlayer();
      const PlayerState = this.player.getIVSEvents().PlayerState;
        ivsPlayer.addEventListener(PlayerState.PLAYING, () => {
            console.log("Player State - PLAYING");
            setTimeout(() => {
                console.log(
                    `This stream is ${
                        ivsPlayer.isLiveLowLatency() ? "" : "not "
                    }playing in ultra low latency mode`
                );
                console.log(`Stream Latency: ${ivsPlayer.getLiveLatency()}s`);
            }, 5000);
        });
<% } -%>
    })
  }

  componentWillUnmount() {
    if (this.player) {
      this.player.dispose();
    }
  }

  render() {
    return (
      <div>
        <div data-vjs-player>
          <video ref={(node) => { this.videoNode = node; }} className="video-js"></video>
        </div>
      </div>
    );
  }
}
<% } -%>
<% if (framework === 'vue') { -%>
<template>
  <div>
      <video ref="videoPlayer" class="video-js"></video>
  </div>
</template>

<script>
import 'video.js/dist/video-js.css'
import videojs from 'video.js';
<% if (channelLatency === 'LOW') { -%>
// eslint-disable-next-line no-undef
registerIVSTech(videojs);
<% } -%>


export default {
  name: "VideoPlayer",
  props: {
      options: {
          type: Object,
          default() {
              return {};
          }
      }
  },
  data() {
      return {
          player: null
      }
  },
  mounted() {
      const options = this.options;
      this.player = videojs(this.$refs.videoPlayer, options, function onPlayerReady() {
          console.log('onPlayerReady', this);
<% if (channelLatency === 'LOW') { -%>
          this.src(options.src);
          const ivsPlayer = this.getIVSPlayer();
          const PlayerState = this.getIVSEvents().PlayerState;
          ivsPlayer.addEventListener(PlayerState.PLAYING, () => {
              console.log("Player State - PLAYING");
              setTimeout(() => {
                  console.log(
                      `This stream is ${
                          ivsPlayer.isLiveLowLatency() ? "" : "not "
                      }playing in ultra low latency mode`
                  );
                  console.log(`Stream Latency: ${ivsPlayer.getLiveLatency()}s`);
              }, 5000);
          });
<% } -%>
      })
  },
  beforeUnmount() {
      if (this.player) {
          this.player.dispose()
      }
  }
}
</script>
<% } -%>
<% if (framework === 'angular') { -%>
import { Component, ElementRef, Input, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';
import videojs from 'video.js';
<% if (channelLatency === 'LOW') { -%>
// @ts-ignore
registerIVSTech(videojs);
<% } -%>
  
@Component({
  selector: 'video-player',
  template: `
    <video #target class="video-js" controls muted playsinline preload="none"></video>
  `,
  styleUrls: [
    './video-player.component.scss'
  ],
  encapsulation: ViewEncapsulation.None,
})
export class VideoPlayerComponent implements OnInit, OnDestroy {
  @ViewChild('target', {static: true}) target: ElementRef | undefined;
  // see options: https://github.com/videojs/video.js/blob/maintutorial-options.html
  @Input() options: any;
  player: videojs.Player | undefined = undefined;

  constructor(
    private elementRef: ElementRef,
  ) { }

  ngOnInit() {
    // instantiate Video.js
    this.player = videojs(this.target?.nativeElement, this.options, () => {
      console.log('onPlayerReady', this);
<% if (channelLatency === 'LOW') { -%>
      this.player?.src(this.options.src);
<% } -%>
    });
  }

  ngOnDestroy() {
    // destroy player
    if (this.player) {
      this.player.dispose();
    }
  }
}
<% } -%>
<% if (framework === 'ember') { -%>
import Ember from 'ember';
import videojs from 'video.js';
<% if (channelLatency === 'LOW') { -%>
// eslint-disable-next-line no-undef
registerIVSTech(videojs);
<% } -%>

export default Ember.Component.extend({
  tagName: 'video',

  classNames: ['video-js'],

  didInsertElement() {
    this._super(...arguments);
    const { controls, autoplay, src<% if (channelLatency === 'LOW') { -%>, type<% } -%> } = this;
    const player = videojs(this.element, {
      controls,
      autoplay,
      preload: 'auto',
<% if (channelLatency === 'LOW') { -%>
      techOrder: ['AmazonIVS'],
<% } -%>
    });

    player.ready(() => {
<% if (channelLatency === 'LOW') { -%>
      player.src(src);
      const ivsPlayer = player.getIVSPlayer();
      const PlayerState = player.getIVSEvents().PlayerState;
      ivsPlayer.addEventListener(PlayerState.PLAYING, () => {
          console.log("Player State - PLAYING");
          setTimeout(() => {
              console.log(
                  `This stream is ${
                      ivsPlayer.isLiveLowLatency() ? "" : "not "
                  }playing in ultra low latency mode`
              );
              console.log(`Stream Latency: ${ivsPlayer.getLiveLatency()}s`);
          }, 5000);
      });
<% } else { -%>
      player.src({ src, type });
<% } -%>
      this.one('willDestroyElement', function () {
        player.dispose();
      });
    });
  },
});
<% } -%>