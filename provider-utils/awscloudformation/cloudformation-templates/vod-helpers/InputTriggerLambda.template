Description: S3 Workflow

Parameters:
  pS3:
    Type: String
    Description: Store template and lambda package
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: s3default
  pSourceFolder:
    Type: String
    Description: Store template and lambda package
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: vod-helpers
  pInputS3:
    Type: String
    Description: ProjectName
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: DefaultName
  pInputS3Arn:
    Type: String
    Description: Input S3 Arn
    Default: arn-default
  pOutputS3:
    Type: String
    Description: ProjectName
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: DefaultName
  pOutputS3Arn:
    Type: String
    Description: Output S3 Arn
    Default: arn-default
  pFunctionName:
    Type: String
    Description: ProjectName
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: BucketWatcher
  pMediaConvertTemplate:
    Type: String
    Description: MediaConvert Template Arn
    Default: arn-default
  pFunctionHash:
    Type: String
    Description: FunctionHash
    Default: default
  env:
    Type: String
    Description: The environment name. e.g. Dev, Test, or Production.
    Default: NONE
  GraphQLAPIId:
    Type: String
    Description: API ID
    Default: NONE
  GraphQLEndpoint:
    Type: String
    Description: API Endpoint URL
    Default: NONE

Resources:
  BucketWatcher:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref pFunctionName
      Description: Sends a notification when a new object is put into the bucket
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Code:
        S3Bucket: !Ref pS3
        S3Key: !Sub
          - vod-helpers/InputLambda-${hash}.zip
          - { hash: !Ref pFunctionHash }
      Environment:
        Variables:
          ARN_TEMPLATE: !Ref pMediaConvertTemplate
          MC_ROLE: !GetAtt MediaConvertRole.Arn
          OUTPUT_BUCKET: !Ref pOutputS3
          ENV: !Ref env
          GRAPHQLID: !Ref GraphQLAPIId
          GRAPHQLEP: !Ref GraphQLEndpoint

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: 
            Service: 
              - lambda.amazonaws.com
          Action: 
            - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: S3PolicyTesting
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              - Effect: Allow
                Action:
                  - mediaconvert:CreateJob
                  - mediaconvert:CreateJobTemplate
                  - mediaconvert:CreatePreset
                  - mediaconvert:DeleteJobTemplate
                  - mediaconvert:DeletePreset
                  - mediaconvert:DescribeEndpoints
                  - mediaconvert:GetJob
                  - mediaconvert:GetJobTemplate
                  - mediaconvert:GetQueue
                  - mediaconvert:GetPreset
                  - mediaconvert:ListJobTemplates
                  - mediaconvert:ListJobs
                  - mediaconvert:ListQueues
                  - mediaconvert:ListPresets
                  - mediaconvert:UpdateJobTemplate
                Resource:
                  - !Join ["", ["arn:aws:mediaconvert:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt MediaConvertRole.Arn
  MediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "mediaconvert.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-mediatranscode-role"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "${pInputS3Arn}/*" 
                  - !Sub "${pOutputS3Arn}/*" 
              - Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - !Join ["", ["arn:aws:execute-api:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]

Outputs:
  oLambdaFunction:
    Value: !GetAtt BucketWatcher.Arn
    Description: Watching s3 buckets all day