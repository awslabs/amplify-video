Description: <%= props.shared.resourceName %>

Parameters:
  env:
    Type: String
    Description: The environment name. e.g. Dev, Test, or Production.
    Default: NONE
  authRoleName:
    Type: String
    Description: Arn for authRoleArn
    Default: NONE
  unauthRoleName:
    Type: String
    Description: Arn for authRoleArn
    Default: NONE
  pS3:
    Type: String
    Description: Store template and lambda package
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: "<%= props.shared.bucket %>"
  pS3InputName:
    Type: String
    Description: Store template and lambda package
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: "<%= props.shared.bucketInput %>"
  pS3OutputName:
    Type: String
    Description: Store template and lambda package
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: "<%= props.shared.bucketOutput %>"
  pSourceFolder:
    Type: String
    Description: Store template and lambda package
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: vod-helpers
  pProjectName:
    Type: String
    Description: ProjectName
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    Default: <%= props.shared.resourceName %>
  pTemplateArn:
    Type: String
    Description: Arn for MediaConvert Template
    Default: <%= props.template.arn %>
  pCloudfrontEnabled:
    Type: String
    Description: Boolean to enable/disable cloudfront
    Default: <%= props.contentDeliveryNetwork.enableDistribution %>

Conditions:
  HasEnvironmentParameter:
    !Not [!Equals [!Ref env, NONE]]

Outputs:
  oVODInputS3:
    Description: Put source video here for processing and hosting by Amplify Video
    Value: !GetAtt rS3InputBucket.Outputs.oInputBucketName
  oVODOutputS3:
    Description: Amplify Video hosts transcoded video content in this bucket
    Value: !GetAtt rS3OutputBucket.Outputs.oOutputBucketName

Resources:
  rS3InputBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/S3InputBucket.template"
      Parameters:
        authRoleName: !Ref authRoleName
        pBucketName: !Ref pS3InputName
                
  rS3OutputBucket:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/S3OutputBucket.template"
      Parameters:
        authRoleName: !Ref authRoleName
        pBucketName: !Ref pS3OutputName
        pCloudfrontEnabled: !Ref pCloudfrontEnabled
<% if (props.contentDeliveryNetwork.enableDistribution) { %>
  rCloudfrontDistribution:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/CFDistribution.template"
      Parameters:
          pBucketName: !Ref pS3OutputName
          pOriginAccessIdentity: !GetAtt rS3OutputBucket.Outputs.oOriginAccessIdentity 
<% } %>
  rInputLambdaTriggerFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/InputTriggerLambda.template"
      Parameters:
        pS3: !Ref pS3
        pSourceFolder: !Ref pSourceFolder
        pInputS3: !GetAtt rS3InputBucket.Outputs.oInputBucketName
        pInputS3Arn: !GetAtt rS3InputBucket.Outputs.oInputBucketArn
        pOutputS3: !GetAtt rS3OutputBucket.Outputs.oOutputBucketName
        pOutputS3Arn: !GetAtt rS3OutputBucket.Outputs.oOutputBucketArn
        pMediaConvertTemplate: !Ref pTemplateArn
        pFunctionName: 
          !If
            - HasEnvironmentParameter
            - !Join
              - '-'
              - - !Ref pProjectName
                - !Ref env
                - 'inputWatcher'
            - !Join
              - '-'
              - - !Ref pProjectName
                - 'inputWatcher'
  rOutputLambdaTriggerFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/OutputTriggerLambda.template"
      Parameters:
        pS3: !Ref pS3
        pSourceFolder: !Ref pSourceFolder
        pOutputS3: !GetAtt rS3OutputBucket.Outputs.oOutputBucketName
        pOutputS3Arn: !GetAtt rS3OutputBucket.Outputs.oOutputBucketArn
        pFunctionName: 
          !If
            - HasEnvironmentParameter
            - !Join
              - '-'
              - - !Ref pProjectName
                - !Ref env
                - 'outputWatcher'
            - !Join
              - '-'
              - - !Ref pProjectName
                - 'outputWatcher'

  rLambdaTriggerSetup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/S3TriggerSetup.template"
      Parameters:
        pS3: !Ref pS3
        pSourceFolder: !Ref pSourceFolder
        pInputS3: !GetAtt rS3InputBucket.Outputs.oInputBucketName
        pInputS3Arn: !GetAtt rS3InputBucket.Outputs.oInputBucketArn
        pOutputS3: !GetAtt rS3OutputBucket.Outputs.oOutputBucketName
        pOutputS3Arn: !GetAtt rS3OutputBucket.Outputs.oOutputBucketArn
        pInputTriggerLambda: !GetAtt rInputLambdaTriggerFunction.Outputs.oLambdaFunction
        pOutputTriggerLambda: !GetAtt rOutputLambdaTriggerFunction.Outputs.oLambdaFunction
        pFunctionName:
          !If
            - HasEnvironmentParameter
            - !Join
              - '-'
              - - !Ref pProjectName
                - !Ref env
                - 'cfTrigger'
            - !Join
              - '-'
              - - !Ref pProjectName
                - 'cfTrigger'
